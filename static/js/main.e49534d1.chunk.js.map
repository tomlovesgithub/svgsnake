{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","points","evt","target","tagName","toLowerCase","preventDefault","svgPos","this","refs","svg","getBoundingClientRect","x","clientX","y","clientY","type","touches","pageX","pageY","left","top","length","shift","push","setState","cx","cy","r","allPoints","d","map","point","i","last","first","key","stroke","strokeLinecap","fill","strokeWidth","onMouseMove","move","bind","onTouchMove","ref","width","height","id","markerWidth","markerHeight","refX","refY","orient","markerUnits","viewBox","React","Component","Boolean","window","location","hostname","match","document","body","style","overflow","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2KA0EeA,E,YAvEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,IAHO,E,kEAOdC,GACH,GAAyC,QAArCA,EAAIC,OAAOC,QAAQC,cAAyB,CAC9CH,EAAII,iBACJ,IAAIC,EAASC,KAAKC,KAAKC,IAAIC,wBACvBC,EAAIV,EAAIW,QACZC,EAAIZ,EAAIa,QACO,cAAXb,EAAIc,OACNd,EAAII,iBACJM,EAAIV,EAAIe,QAAQ,GAAGC,MACnBJ,EAAIZ,EAAIe,QAAQ,GAAGE,OAErBP,GAAQL,EAAOa,KACfN,GAAQP,EAAOc,IACf,IAAIpB,EAASO,KAAKR,MAAMC,OACpBA,EAAOqB,OAAS,IAClBrB,EAAOsB,QAETtB,EAAOuB,KAAK,CACVZ,EAAGA,EACHE,EAAGA,IAELN,KAAKiB,SAASxB,M,+BAIhB,IAAIA,EAAS,4BAAQyB,GAAG,MAAMC,GAAG,MAAMC,EAAE,MACzC,GAAIpB,KAAKR,MAAMC,OAAOqB,OAAS,EAAG,CAChC,IAAIO,EAAYrB,KAAKR,MAAMC,OAC3B6B,EAAI,GACJ7B,EAAS4B,EAAUE,KAAI,SAASC,EAAOC,GACrC,IAAIC,EAAQD,IAAMJ,EAAUP,OAAS,EACjCa,EAAe,IAANF,EAQb,OAPIE,IACFL,GAAK,MAEPA,GAAK,IAAME,EAAMpB,EAAI,IAAMoB,EAAMlB,EAC7BqB,IACFL,GAAK,OAEHI,EACK,0BAAME,IAAKH,EAAGI,OAAO,OAAOC,cAAc,QAAQC,KAAK,OAAOC,YAAY,KAAKV,EAAGA,IAGlF,QAMb,OACE,yBAAKW,YAAajC,KAAKkC,KAAKC,KAAKnC,MAAOoC,YAAapC,KAAKkC,KAAKC,KAAKnC,OACpE,yBAAKqC,IAAI,MAAMC,MAAM,QAAQC,OAAO,SACpC,8BACA,4BAAQC,GAAG,QAAQC,YAAY,IAAIC,aAAa,KAAKC,KAAK,IAAIC,KAAK,IAAIC,OAAO,OAAOC,YAAY,cAAcC,QAAQ,aACvH,0BAAMzB,EAAE,mBAAmBS,KAAK,WAG/BtC,Q,GAjEWuD,IAAMC,WCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,SAASC,KAAKC,MAAMC,SAAW,SAE/BC,IAASC,OAAO,kBAAC,EAAD,MAASL,SAASM,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e49534d1.chunk.js","sourcesContent":["import React from 'react'\n// import {isMobile} from 'react-device-detect';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      points: []\n    };\n  }\n\n  move(evt) {\n    if (evt.target.tagName.toLowerCase() === 'svg') {\n      evt.preventDefault();\n      var svgPos = this.refs.svg.getBoundingClientRect();\n      var x = evt.clientX,\n      y = evt.clientY;\n      if (evt.type==='touchmove') {\n        evt.preventDefault();\n        x = evt.touches[0].pageX\n        y = evt.touches[0].pageY;\n      }\n      x = x - svgPos.left;\n      y = y - svgPos.top;\n      var points = this.state.points;\n      if (points.length > 50) {\n        points.shift();\n      }\n      points.push({\n        x: x,\n        y: y\n      });\n      this.setState(points);\n    }\n  }\n  render() {\n    var points = <circle cx=\"100\" cy=\"100\" r=\"1\" />;\n    if (this.state.points.length > 0) {\n      var allPoints = this.state.points,\n      d = '';\n      points = allPoints.map(function(point, i) {\n        var last = (i === allPoints.length - 1);\n        var first = (i === 0);\n        if (first) {\n          d += 'M ';\n        }\n        d += ' ' + point.x + ' ' + point.y;\n        if (first) {\n          d += ' L ';\n        }\n        if (last) {\n          return <path key={i} stroke=\"grey\" strokeLinecap=\"round\" fill=\"none\" strokeWidth=\"30\" d={d}/>\n        }\n        else {\n          return null\n        };\n      });\n\n    }\n\n    return (\n      <div onMouseMove={this.move.bind(this)} onTouchMove={this.move.bind(this)}>\n      <svg ref=\"svg\" width=\"100vw\" height=\"100vh\">\n      <defs>\n      <marker id=\"arrow\" markerWidth=\"4\" markerHeight=\"20\" refX=\"0\" refY=\"4\" orient=\"auto\" markerUnits=\"strokeWidth\" viewBox=\"0 0 50 50\">\n      <path d=\"M0,0 L0,6 L9,3 z\" fill=\"#f00\" />\n      </marker>\n      </defs>\n      {points}\n      </svg>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\ndocument.body.style.overflow = \"hidden\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}